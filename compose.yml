services:
  py-ocr-service:
    image: ddddocr-http-api:latest
    build: .
    # 端口映射：将主机的 8000 端口映射到容器内由 DDDDOCR_LISTEN_ADDRESS 定义的端口
    # 注意：如果 DDDDOCR_LISTEN_ADDRESS 设置为Unix套接字，此端口映射将不会被使用。
    ports:
      - "8000:8000"
    volumes:
      # 挂载本地目录到容器中，用于存放自定义模型
      - ./models:/app/models
    # 使用 Podman/Docker Secrets 来安全地管理密钥，而不是使用明文环境变量。
    #
    # --- Podman Secrets 使用方法 ---
    # 1. 创建密钥 (生成一个256位的强密钥):
    #    openssl rand -base64 32 | podman secret create ocr_shared_secret -
    # 2. 在下面取消注释 `secrets` 部分。
    #
    # --- Docker Secrets 使用方法 ---
    #    与Podman类似，但命令略有不同，请参考Docker官方文档。
    #
    secrets:
      - ocr_shared_secret
    environment:
      # 将密钥从 secret 文件挂载为环境变量
      - OCR_SHARED_SECRET_FILE=/run/secrets/ocr_shared_secret
      
      # --- 服务监听设置 ---
      # 可以是端口(e.g., 8000), IP:端口(e.g., 0.0.0.0:8080), 或Unix套接字路径(e.g., /tmp/ocr.sock)
      - DDDDOCR_LISTEN_ADDRESS=8000

      # --- 身份验证设置 ---
      # 是否对远程(公网)请求开启验证
      - AUTH_REMOTE_ENABLED=true
      # 是否对本地/内网请求开启验证
      - AUTH_LOCAL_ENABLED=false
      
      # --- 模型加载设置 ---
      # 是否在启动时加载目标检测模型
      - DET_ENABLED=false

# 顶层 secrets 定义
secrets:
  ocr_shared_secret:
    # 在本地开发时，可以直接引用一个文件
    # 在生产环境中，应使用由 `podman secret create` 管理的密钥
    # file: ./ocr_secret.txt
    external: true  # 引用预先创建的 Secret
